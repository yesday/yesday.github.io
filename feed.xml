<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>YesDay Blog</title>
    <link>http://yesday.github.io</link>
    <atom:link href="http://yesday.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <description>Web feed for the YesDay Blog</description>
    <language>en-gb</language>
    <pubDate>Thu, 21 Sep 2017 15:02:27 +0300</pubDate>
    <lastBuildDate>Thu, 21 Sep 2017 15:02:27 +0300</lastBuildDate>

    <item>
      <title>How to install ArchLinux with Full Disk Encryption on ODROID-C2</title>
      <link>http://yesday.github.io/blog/2017/how-to-install-archlinux-with-full-disk-encryption-on-odroid-c2.html</link>
      <pubDate>Tue, 19 Sep 2017 00:00:00 +0300</pubDate>
      <guid isPermaLink="false">blog/2017/how-to-install-archlinux-with-full-disk-encryption-on-odroid-c2.html</guid>
      <description>&amp;lt;div id=&amp;quot;preamble&amp;quot;&amp;gt; 
 &amp;lt;div class=&amp;quot;sectionbody&amp;quot;&amp;gt; 
  &amp;lt;div id=&amp;quot;toc&amp;quot; class=&amp;quot;toc&amp;quot;&amp;gt; 
   &amp;lt;div id=&amp;quot;toctitle&amp;quot; class=&amp;quot;title&amp;quot;&amp;gt;
    Table of Contents
   &amp;lt;/div&amp;gt; 
   &amp;lt;ul class=&amp;quot;sectlevel1&amp;quot;&amp;gt; 
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#introduction&amp;quot;&amp;gt;1. Introduction&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#hardware_requirements&amp;quot;&amp;gt;2. Hardware requirements&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#flash_the_os_image_and_boot_odroid_c2&amp;quot;&amp;gt;3. Flash the OS image and boot ODROID-C2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#change_passwords&amp;quot;&amp;gt;4. Change passwords&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#install_required_packages&amp;quot;&amp;gt;5. Install required packages&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#install_dracut&amp;quot;&amp;gt;6. Install dracut&amp;lt;/a&amp;gt; 
     &amp;lt;ul class=&amp;quot;sectlevel2&amp;quot;&amp;gt; 
      &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#error_makepkg_failed_unknown_public_key&amp;quot;&amp;gt;6.1. ERROR: makepkg FAILED (unknown public key)&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 
      &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#error_gnupg_key_generation_failed_no_pinentry&amp;quot;&amp;gt;6.2. ERROR: GnuPG Key generation failed: No pinentry&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 
      &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#error_pacman_failed_to_install_missing_dependencies&amp;quot;&amp;gt;6.3. ERROR: &amp;#39;pacman&amp;#39; failed to install missing dependencies&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 
     &amp;lt;/ul&amp;gt; &amp;lt;/li&amp;gt; 
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#prepare_the_luks_rootfs&amp;quot;&amp;gt;7. Prepare the LUKS rootfs&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#generate_new_initramfs_and_reboot_into_the_luks_rootfs&amp;quot;&amp;gt;8. Generate new initramfs and reboot into the LUKS rootfs&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#remotely_unlock_the_luks_rootfs_during_boot_using_dropbear_sshd&amp;quot;&amp;gt;9. Remotely unlock the LUKS rootfs during boot using dropbear sshd&amp;lt;/a&amp;gt; 
     &amp;lt;ul class=&amp;quot;sectlevel2&amp;quot;&amp;gt; 
      &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#make_sure_the_ssh_daemon_is_running&amp;quot;&amp;gt;9.1. Make sure the SSH daemon is running&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 
      &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#install_and_configure_dropbear&amp;quot;&amp;gt;9.2. Install and configure dropbear&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 
      &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#unlocking_the_volume_interactively&amp;quot;&amp;gt;9.3. Unlocking the volume interactively&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 
      &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#unlocking_the_volume_using_console_auth_and_pexpect&amp;quot;&amp;gt;9.4. Unlocking the volume using console_auth and pexpect&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 
     &amp;lt;/ul&amp;gt; &amp;lt;/li&amp;gt; 
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#references&amp;quot;&amp;gt;10. References&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 
   &amp;lt;/ul&amp;gt; 
  &amp;lt;/div&amp;gt; 
 &amp;lt;/div&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;sect1&amp;quot;&amp;gt; 
 &amp;lt;h2 id=&amp;quot;introduction&amp;quot;&amp;gt;1. Introduction&amp;lt;/h2&amp;gt; 
 &amp;lt;div class=&amp;quot;sectionbody&amp;quot;&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Full Disk Encryption (FDE) protects our data against unauthorised access in case someone gains physical access to the storage media.&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;In this document we are describing how to install ArchLinux with Full Disk Encryption on ODROID-C2. The encryption method is LUKS with XTS key-size 512 bit (AES-256).&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;In a nutshell, Full Disk Encryption requires&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;ulist&amp;quot;&amp;gt; 
   &amp;lt;ul&amp;gt; 
    &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;Encrypting a partition and copying the root filesystem to it.&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
    &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;The kernel to include the &amp;lt;code&amp;gt;dm_crypt&amp;lt;/code&amp;gt; kernel module. In our case this is already included by default therefore we wonâ€™t need to re-compile the kernel.&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
    &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;The &amp;lt;code&amp;gt;initramfs&amp;lt;/code&amp;gt; to include the &amp;lt;code&amp;gt;dm_crypt&amp;lt;/code&amp;gt; kernel module and the &amp;lt;code&amp;gt;cryptsetup&amp;lt;/code&amp;gt; binary. We use a tool called &amp;lt;code&amp;gt;dracut&amp;lt;/code&amp;gt; to generate the required &amp;lt;code&amp;gt;initramfs&amp;lt;/code&amp;gt;. Dracut supports the required functionality via the additional modules &amp;lt;code&amp;gt;crypt&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;lvm&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
    &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;Passing the &amp;lt;a href=&amp;quot;https://www.kernel.org/pub/linux/utils/boot/dracut/dracut.html#_crypto_luks&amp;quot;&amp;gt;dracut options for LUKS&amp;lt;/a&amp;gt; to the &amp;lt;code&amp;gt;initramfs&amp;lt;/code&amp;gt; via the &amp;lt;code&amp;gt;bootargs&amp;lt;/code&amp;gt; property inside &amp;lt;code&amp;gt;boot.ini&amp;lt;/code&amp;gt;. For example, say that in our case we want the &amp;lt;code&amp;gt;initramfs&amp;lt;/code&amp;gt; to unlock a LUKS volume with UUID &amp;lt;code&amp;gt;ae51db2d-0890-4b1b-abc5-8c10f01da353&amp;lt;/code&amp;gt; and load the root filesystem from the device mapper &amp;lt;code&amp;gt;/dev/mapper/vg-root&amp;lt;/code&amp;gt;. To pass these dracut options we configure the following:&amp;lt;/p&amp;gt; 
     &amp;lt;div class=&amp;quot;listingblock&amp;quot;&amp;gt; 
      &amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;
       sudo nano /boot/boot.ini
      &amp;lt;/div&amp;gt; 
      &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
       &amp;lt;pre class=&amp;quot;prettyprint highlight&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-ini&amp;quot; data-lang=&amp;quot;ini&amp;quot;&amp;gt;setenv bootargs &amp;quot;rd.luks.uuid=ae51db2d-0890-4b1b-abc5-8c10f01da353 root=/dev/mapper/vg-root rootwait &amp;amp;lt;leave the rest as is&amp;amp;gt;&amp;quot;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 
      &amp;lt;/div&amp;gt; 
     &amp;lt;/div&amp;gt; &amp;lt;/li&amp;gt; 
   &amp;lt;/ul&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Additionally, for a headless setup you will need to enable remote unlocking via SSH as described in &amp;lt;a href=&amp;quot;#remotely_unlock_the_luks_rootfs_during_boot_using_dropbear_sshd&amp;quot;&amp;gt;Remotely unlock the LUKS rootfs during boot using dropbear sshd&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Last but not least, if you prefer to use the described functionality out of the box, simply download &amp;lt;a href=&amp;quot;../../os-image-for-odroid-c2-featuring-archlinux-luks-full-disk-encryption-and-remote-unlocking.html&amp;quot;&amp;gt;this OS image&amp;lt;/a&amp;gt;. Either way, the current document will provide more technical details in regards to the underlying components and how they work together in a Full Disk Encryption environment.&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
 &amp;lt;/div&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;sect1&amp;quot;&amp;gt; 
 &amp;lt;h2 id=&amp;quot;hardware_requirements&amp;quot;&amp;gt;2. Hardware requirements&amp;lt;/h2&amp;gt; 
 &amp;lt;div class=&amp;quot;sectionbody&amp;quot;&amp;gt; 
  &amp;lt;div class=&amp;quot;ulist&amp;quot;&amp;gt; 
   &amp;lt;ul&amp;gt; 
    &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;ODROID-C2&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
    &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;A Linux box from which you will flash the OS image and interact with the ODROID-C2&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
    &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;USB disk with at least 4G capacity&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
    &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;microSD card or eMMC module with at least 4G capacity&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
    &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;(Optional) &amp;lt;a href=&amp;quot;http://www.hardkernel.com/main/products/prdt_info.php?g_code=G134111883934&amp;quot;&amp;gt;USB-UART Module Kit&amp;lt;/a&amp;gt; to connect to the ODROID-C2â€™s serial console. Refer to &amp;lt;a href=&amp;quot;https://yesday.github.io/blog/2017/why-is-the-serial-console-better-than-hdmi-for-debugging.html&amp;quot;&amp;gt;this post&amp;lt;/a&amp;gt; for instructions on how to connect along with explanation why the serial console is highly recommended in this case.&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
   &amp;lt;/ul&amp;gt; 
  &amp;lt;/div&amp;gt; 
 &amp;lt;/div&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;sect1&amp;quot;&amp;gt; 
 &amp;lt;h2 id=&amp;quot;flash_the_os_image_and_boot_odroid_c2&amp;quot;&amp;gt;3. Flash the OS image and boot ODROID-C2&amp;lt;/h2&amp;gt; 
 &amp;lt;div class=&amp;quot;sectionbody&amp;quot;&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Flash the OS image to the &amp;lt;strong&amp;gt;USB disk&amp;lt;/strong&amp;gt; by following the instructions from &amp;lt;a href=&amp;quot;https://archlinuxarm.org/platforms/armv8/amlogic/odroid-c2&amp;quot; class=&amp;quot;bare&amp;quot;&amp;gt;https://archlinuxarm.org/platforms/armv8/amlogic/odroid-c2&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Replace &amp;lt;code&amp;gt;/dev/mmcblk0&amp;lt;/code&amp;gt; in the following instructions with the device name for the microSD card as it appears on your computer.&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;If mounted, unmount the partitions of the &amp;lt;strong&amp;gt;microSD card&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre&amp;gt;lsblk
umount /dev/mmcblk0p1
umount /dev/mmcblk0p2&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Zero the beginning of the microSD card&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre&amp;gt;sudo dd if=/dev/zero bs=1M count=8 of=/dev/mmcblk0
sync&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Using a tool like &amp;lt;code&amp;gt;GParted&amp;lt;/code&amp;gt;, create on the microSD card an MBR/msdos partition table and two partitions:&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;ulist&amp;quot;&amp;gt; 
   &amp;lt;ul&amp;gt; 
    &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;&amp;lt;code&amp;gt;ext4&amp;lt;/code&amp;gt; partition with &amp;lt;code&amp;gt;128M&amp;lt;/code&amp;gt; size&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
    &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;&amp;lt;code&amp;gt;lvm2&amp;lt;/code&amp;gt; partition occupying the rest of the space (no need to format yet)&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
   &amp;lt;/ul&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Copy the contents of the &amp;lt;code&amp;gt;/boot&amp;lt;/code&amp;gt; directory from the USB disk into the first partition of the microSD card&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre&amp;gt;sudo cp -R /media/user/usb-disk/boot/* /media/user/micro-sd-card-part1/&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Create a symbolic link as a workaround for the &amp;lt;a href=&amp;quot;https://forum.odroid.com/viewtopic.php?f=138&amp;amp;amp;t=19452&amp;quot;&amp;gt;hardcoded boot.ini path of the alarm/uboot-odroid-c2&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre&amp;gt;cd /media/user/micro-sd-card-part1
sudo ln -s . boot&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Flash the bootloader files&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre&amp;gt;sudo ./sd_fusing.sh /dev/mmcblk0&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Determine the UUID of the USB disk&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;listingblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre class=&amp;quot;prettyprint highlight&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;$ sudo lsblk -o name,uuid,mountpoint
NAME                    UUID                                   MOUNTPOINT
sdb
â””â”€sdb1                  2b53696c-2e8e-4e61-a164-1a7463fd3785   /media/user/usb-disk&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;admonitionblock caution&amp;quot;&amp;gt; 
   &amp;lt;table&amp;gt; 
    &amp;lt;tbody&amp;gt;
     &amp;lt;tr&amp;gt; 
      &amp;lt;td class=&amp;quot;icon&amp;quot;&amp;gt; 
       &amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;
        Caution
       &amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt; 
      &amp;lt;td class=&amp;quot;content&amp;quot;&amp;gt; If there are duplicate UUIDs among the partitions of the USB disk and the microSD card then deduplicate them (e.g. &amp;lt;code&amp;gt;sudo tune2fs /dev/sda2 -U $(uuidgen)&amp;lt;/code&amp;gt;) to avoid future conflicts. &amp;lt;/td&amp;gt; 
     &amp;lt;/tr&amp;gt; 
    &amp;lt;/tbody&amp;gt;
   &amp;lt;/table&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Configure the &amp;lt;code&amp;gt;boot.ini&amp;lt;/code&amp;gt; to boot from the USB disk. To do so, use the UUID from the previous step to configure the &amp;lt;code&amp;gt;boot.ini&amp;lt;/code&amp;gt; of the microSD card.&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;listingblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;
    sudo nano /media/user/micro-sd-card-part1/boot.ini
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre class=&amp;quot;prettyprint highlight&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-ini&amp;quot; data-lang=&amp;quot;ini&amp;quot;&amp;gt;setenv bootargs &amp;quot;root=UUID=2b53696c-2e8e-4e61-a164-1a7463fd3785 rootwait &amp;amp;lt;leave the rest as is&amp;amp;gt;&amp;quot;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Unmount, run &amp;lt;code&amp;gt;sync&amp;lt;/code&amp;gt; few times, and remove the microSD card and the USB disk from the Linux box.&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Plug the microSD card and the USB disk to the ODROID-C2.&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Boot the ODROID-C2 and connect to its serial console. If you need instructions on how to connect to the serial console, &amp;lt;a href=&amp;quot;why-is-the-serial-console-better-than-hdmi-for-debugging.html&amp;quot;&amp;gt;refer here&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;If all goes well you should boot into the USB disk.&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;admonitionblock caution&amp;quot;&amp;gt; 
   &amp;lt;table&amp;gt; 
    &amp;lt;tbody&amp;gt;
     &amp;lt;tr&amp;gt; 
      &amp;lt;td class=&amp;quot;icon&amp;quot;&amp;gt; 
       &amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;
        Caution
       &amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt; 
      &amp;lt;td class=&amp;quot;content&amp;quot;&amp;gt; If &amp;lt;code&amp;gt;root=UUID=2b53696c-2e8e-4e61-a164-1a7463fd3785&amp;lt;/code&amp;gt; doesnâ€™t work then try &amp;lt;code&amp;gt;root=/dev/sda1&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;root=/dev/sdb1&amp;lt;/code&amp;gt; or whatever device name you see in the console prior to the failed boot (e.g. &amp;lt;code&amp;gt;[ 14.812393] sd 1:0:0:0: [sda] Attached SCSI removable disk&amp;lt;/code&amp;gt;). If still having issues try restarting some times and/or repositioning the USB disk into a different USB port on the ODROID-C2. Donâ€™t worry if it seems too much trouble, as you wonâ€™t have to boot to the USB disk again after the first successful boot. &amp;lt;/td&amp;gt; 
     &amp;lt;/tr&amp;gt; 
    &amp;lt;/tbody&amp;gt;
   &amp;lt;/table&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;The default credentials are &amp;lt;code&amp;gt;alarm/alarm&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;root/root&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Verify the root filesystem is mounted from the USB disk&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre&amp;gt;df -h&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
 &amp;lt;/div&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;sect1&amp;quot;&amp;gt; 
 &amp;lt;h2 id=&amp;quot;change_passwords&amp;quot;&amp;gt;4. Change passwords&amp;lt;/h2&amp;gt; 
 &amp;lt;div class=&amp;quot;sectionbody&amp;quot;&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Change the passwords for the &amp;lt;code&amp;gt;alarm&amp;lt;/code&amp;gt; and the &amp;lt;code&amp;gt;root&amp;lt;/code&amp;gt; user. The default credentials are &amp;lt;code&amp;gt;alarm/alarm&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;root/root&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre&amp;gt;passwd
su
passwd&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
 &amp;lt;/div&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;sect1&amp;quot;&amp;gt; 
 &amp;lt;h2 id=&amp;quot;install_required_packages&amp;quot;&amp;gt;5. Install required packages&amp;lt;/h2&amp;gt; 
 &amp;lt;div class=&amp;quot;sectionbody&amp;quot;&amp;gt; 
  &amp;lt;div class=&amp;quot;listingblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre class=&amp;quot;prettyprint highlight&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;su
pacman -Syu
pacman -S --needed sudo python git rsync lvm2 cryptsetup&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;(Optional) Setup passwordless sudo for the user &amp;lt;code&amp;gt;alarm&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre&amp;gt;echo &amp;#39;alarm ALL=(ALL) NOPASSWD: ALL&amp;#39; &amp;amp;gt; /etc/sudoers.d/010_alarm-nopasswd&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
 &amp;lt;/div&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;sect1&amp;quot;&amp;gt; 
 &amp;lt;h2 id=&amp;quot;install_dracut&amp;quot;&amp;gt;6. Install dracut&amp;lt;/h2&amp;gt; 
 &amp;lt;div class=&amp;quot;sectionbody&amp;quot;&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Install pacaur (AUR helper)&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;listingblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre class=&amp;quot;prettyprint highlight&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;sudo pacman -S --needed base-devel cower
mkdir -p ~/.cache/pacaur &amp;amp;amp;&amp;amp;amp; cd &amp;quot;$_&amp;quot;
cower -d pacaur
cd pacaur
makepkg -si --noconfirm --needed&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Install dracut using the pacaur tool&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;listingblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre class=&amp;quot;prettyprint highlight&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;pacaur -S dracut # ignore the &amp;#39;aarch64&amp;#39; architecture error, go to next step
cd ~/.cache/pacaur/dracut/
nano PKGBUILD # replace `arch=(&amp;quot;i686&amp;quot; &amp;quot;x86_64&amp;quot;)` with `arch=(&amp;quot;aarch64&amp;quot;)`
makepkg -si --noconfirm --needed&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Verify the dracut installation by listing modules&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre&amp;gt;dracut --list-modules&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;sect2&amp;quot;&amp;gt; 
   &amp;lt;h3 id=&amp;quot;error_makepkg_failed_unknown_public_key&amp;quot;&amp;gt;6.1. ERROR: makepkg FAILED (unknown public key)&amp;lt;/h3&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;If the &amp;lt;code&amp;gt;makepkg&amp;lt;/code&amp;gt; produces an error like &amp;lt;code&amp;gt;dracut-046.tar â€¦â€‹ FAILED (unknown public key 340F12141EA0994D)&amp;lt;/code&amp;gt;, then type these commands and try again:&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
     &amp;lt;pre&amp;gt;gpg --full-gen-key
gpg --recv-key 340F12141EA0994D&amp;lt;/pre&amp;gt; 
    &amp;lt;/div&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;Refer to &amp;lt;a href=&amp;quot;https://wiki.archlinux.org/index.php/Makepkg#Signature_checking&amp;quot;&amp;gt;Makepkg signature checking&amp;lt;/a&amp;gt; for more details.&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;sect2&amp;quot;&amp;gt; 
   &amp;lt;h3 id=&amp;quot;error_gnupg_key_generation_failed_no_pinentry&amp;quot;&amp;gt;6.2. ERROR: GnuPG Key generation failed: No pinentry&amp;lt;/h3&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;If &amp;lt;code&amp;gt;gpg --full-gen-key&amp;lt;/code&amp;gt; reports the error &amp;lt;code&amp;gt;Key generation failed: No pinentry&amp;lt;/code&amp;gt;, then follow the below steps to configure gpg as described in &amp;lt;a href=&amp;quot;https://wiki.archlinux.org/index.php/GnuPG#gpg-agent&amp;quot; class=&amp;quot;bare&amp;quot;&amp;gt;https://wiki.archlinux.org/index.php/GnuPG#gpg-agent&amp;lt;/a&amp;gt;, and try again.&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;The gpg-agent needs to know how to ask the user for the password.&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;listingblock&amp;quot;&amp;gt; 
    &amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;
     nano ~/.gnupg/gpg-agent.conf
    &amp;lt;/div&amp;gt; 
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
     &amp;lt;pre class=&amp;quot;prettyprint highlight&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-conf&amp;quot; data-lang=&amp;quot;conf&amp;quot;&amp;gt;pinentry-program /usr/bin/pinentry-curses&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 
    &amp;lt;/div&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;Reload the gpg-agent&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
     &amp;lt;pre&amp;gt;gpg-connect-agent reloadagent /bye&amp;lt;/pre&amp;gt; 
    &amp;lt;/div&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;sect2&amp;quot;&amp;gt; 
   &amp;lt;h3 id=&amp;quot;error_pacman_failed_to_install_missing_dependencies&amp;quot;&amp;gt;6.3. ERROR: &amp;#39;pacman&amp;#39; failed to install missing dependencies&amp;lt;/h3&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;If &amp;lt;code&amp;gt;makepkg&amp;lt;/code&amp;gt; reports missing dependencies error, then upgrade the packages and try again.&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;listingblock&amp;quot;&amp;gt; 
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
     &amp;lt;pre class=&amp;quot;prettyprint highlight&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;sudo pacman -Syu
pacaur -Syua&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 
    &amp;lt;/div&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
 &amp;lt;/div&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;sect1&amp;quot;&amp;gt; 
 &amp;lt;h2 id=&amp;quot;prepare_the_luks_rootfs&amp;quot;&amp;gt;7. Prepare the LUKS rootfs&amp;lt;/h2&amp;gt; 
 &amp;lt;div class=&amp;quot;sectionbody&amp;quot;&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Encrypt the second partition of the microSD card (see also &amp;lt;a href=&amp;quot;https://security.stackexchange.com/questions/40208/recommended-options-for-luks-cryptsetup&amp;quot;&amp;gt;Recommended options for LUKS&amp;lt;/a&amp;gt;)&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre&amp;gt;sudo cryptsetup -v -y -c aes-xts-plain64 -s 512 -h sha512 -i 5000 --use-random luksFormat /dev/mmcblk0p2&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;listingblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre&amp;gt;-v = verbose
-y = verify passphrase, ask twice, and complain if they don&amp;#39;t match
-c = specify the cipher used
-s = specify the key size used
-h = specify the hash used
-i = number of milliseconds to spend passphrase processing (if using anything more than sha1, must be great than 1000)
â€“use-random = which random number generator to use
luksFormat = to initialize the partition and set a passphrase
/dev/mmcblk0p2 = the partition to encrypt&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Unlock the LUKS device and mount it at /dev/mapper/lvm&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre&amp;gt;sudo cryptsetup luksOpen /dev/mmcblk0p2 lvm&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Create primary volume, volume group, and logical volume&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;listingblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre class=&amp;quot;prettyprint highlight&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;sudo pvcreate /dev/mapper/lvm
sudo vgcreate vg /dev/mapper/lvm
sudo lvcreate -l 100%FREE -n root vg&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Create filesystem&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre&amp;gt;sudo mkfs.ext4 -O ^metadata_csum,^64bit /dev/mapper/vg-root&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Mount the new encrypted root volume (logical volume)&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre&amp;gt;sudo mount /dev/mapper/vg-root /mnt&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Copy the existing root volume to the new, encrypted root volume (with a &amp;lt;code&amp;gt;1.5G&amp;lt;/code&amp;gt; installation, completes in about 6 min on an average microSD)&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;listingblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre class=&amp;quot;prettyprint highlight&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;sudo rsync -av \
--exclude=/boot \
--exclude=/mnt \
--exclude=/proc \
--exclude=/dev \
--exclude=/sys \
--exclude=/tmp \
--exclude=/run \
--exclude=/media \
--exclude=/var/log \
--exclude=/var/cache/pacman/pkg \
--exclude=/usr/src/linux-headers* \
--exclude=/home/*/.gvfs \
--exclude=/home/*/.local/share/Trash \
/ /mnt&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;If the SSH host keys are empty, remove them so that they will be regenerated the next time the sshd starts. This will prevent the memory leak issue as described &amp;lt;a href=&amp;quot;https://raspberrypi.stackexchange.com/questions/69289/raspberry-pi-3-on-arch-armv7-openssh-daemon-failed-on-memory-allocation&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre&amp;gt;sudo rm /mnt/etc/ssh/ssh_host*key*&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Create some directories and mount the boot partition&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;listingblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre class=&amp;quot;prettyprint highlight&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;sudo mkdir -p /mnt/boot /mnt/mnt /mnt/proc /mnt/dev /mnt/sys /mnt/tmp
sudo mount -t ext4 /dev/mmcblk0p1 /mnt/boot&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Register the encrypted volume in &amp;lt;code&amp;gt;crypttab&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre&amp;gt;sudo bash -c &amp;#39;echo lvm UUID=$(cryptsetup luksUUID /dev/mmcblk0p2) none luks&amp;amp;gt;&amp;amp;gt; /mnt/etc/crypttab&amp;#39;&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Configure &amp;lt;code&amp;gt;fstab&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;listingblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;
    sudo nano /mnt/etc/fstab
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre class=&amp;quot;prettyprint highlight&amp;quot;&amp;gt;&amp;lt;code&amp;gt;/dev/mapper/vg-root / ext4 errors=remount-ro,noatime,discard 0 1
/dev/mmcblk0p1 /boot ext4 noatime,discard 0 2&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
 &amp;lt;/div&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;sect1&amp;quot;&amp;gt; 
 &amp;lt;h2 id=&amp;quot;generate_new_initramfs_and_reboot_into_the_luks_rootfs&amp;quot;&amp;gt;8. Generate new initramfs and reboot into the LUKS rootfs&amp;lt;/h2&amp;gt; 
 &amp;lt;div class=&amp;quot;sectionbody&amp;quot;&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Generate new initramfs using dracut (mind the order of the modules)&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre&amp;gt;sudo dracut --force --hostonly -a &amp;quot;crypt lvm&amp;quot; /mnt/boot/initramfs-linux.img&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Determine the LUKS UUID&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre&amp;gt;sudo cryptsetup luksUUID /dev/mmcblk0p2
470cc9eb-f36b-40a2-98d8-7fce3285bb89&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Configure the &amp;lt;code&amp;gt;rd.luks.uuid&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;root&amp;lt;/code&amp;gt; dracut options in &amp;lt;code&amp;gt;bootargs&amp;lt;/code&amp;gt;. These will unlock the LUKS volume and load the rootfs from it during boot.&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;listingblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;
    sudo nano /mnt/boot/boot.ini
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre class=&amp;quot;prettyprint highlight&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-ini&amp;quot; data-lang=&amp;quot;ini&amp;quot;&amp;gt;setenv bootargs &amp;quot;rd.luks.uuid=470cc9eb-f36b-40a2-98d8-7fce3285bb89 root=/dev/mapper/vg-root rootwait &amp;amp;lt;leave the rest as is&amp;amp;gt;&amp;quot;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;admonitionblock caution&amp;quot;&amp;gt; 
   &amp;lt;table&amp;gt; 
    &amp;lt;tbody&amp;gt;
     &amp;lt;tr&amp;gt; 
      &amp;lt;td class=&amp;quot;icon&amp;quot;&amp;gt; 
       &amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;
        Caution
       &amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt; 
      &amp;lt;td class=&amp;quot;content&amp;quot;&amp;gt; In the above step, do NOT delete the rest of &amp;lt;code&amp;gt;bootargs&amp;lt;/code&amp;gt;, essentially replace &amp;lt;code&amp;gt;root=UUID=2b53696c-2e8e-4e61-a164-1a7463fd3785&amp;lt;/code&amp;gt; with &amp;lt;code&amp;gt;rd.luks.uuid=470cc9eb-f36b-40a2-98d8-7fce3285bb89 root=/dev/mapper/vg-root&amp;lt;/code&amp;gt; and leave the rest of &amp;lt;code&amp;gt;bootargs&amp;lt;/code&amp;gt; untouched. &amp;lt;/td&amp;gt; 
     &amp;lt;/tr&amp;gt; 
    &amp;lt;/tbody&amp;gt;
   &amp;lt;/table&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Unmount and reboot into the LUKS rootfs&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre&amp;gt;sudo umount /mnt/boot
sudo umount /mnt
sudo reboot&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;If all goes well you will be prompted to enter the LUKS password during boot.&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Verify the LUKS rootfs&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre&amp;gt;df -h&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;listingblock&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;
    output
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
    &amp;lt;pre class=&amp;quot;prettyprint highlight&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;Filesystem           Size  Used Avail Use% Mounted on
devtmpfs             714M     0  714M   0% /dev
tmpfs                859M     0  859M   0% /dev/shm
tmpfs                859M  8.3M  851M   1% /run
tmpfs                859M     0  859M   0% /sys/fs/cgroup
/dev/mapper/vg-root  1.7G  1.4G  256M  85% /
tmpfs                859M     0  859M   0% /tmp
/dev/mmcblk0p1       120M   26M   86M  23% /boot
tmpfs                172M     0  172M   0% /run/user/1000&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
 &amp;lt;/div&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;sect1&amp;quot;&amp;gt; 
 &amp;lt;h2 id=&amp;quot;remotely_unlock_the_luks_rootfs_during_boot_using_dropbear_sshd&amp;quot;&amp;gt;9. Remotely unlock the LUKS rootfs during boot using dropbear sshd&amp;lt;/h2&amp;gt; 
 &amp;lt;div class=&amp;quot;sectionbody&amp;quot;&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
   &amp;lt;p&amp;gt;Replace &amp;lt;code&amp;gt;10.0.0.100&amp;lt;/code&amp;gt; in the following instructions with the ip address assigned to the ODROID-C2 by your local DHCP server. Use the &amp;lt;code&amp;gt;fing&amp;lt;/code&amp;gt; tool to find the assigned ip address.&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;sect2&amp;quot;&amp;gt; 
   &amp;lt;h3 id=&amp;quot;make_sure_the_ssh_daemon_is_running&amp;quot;&amp;gt;9.1. Make sure the SSH daemon is running&amp;lt;/h3&amp;gt; 
   &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
     &amp;lt;pre&amp;gt;sudo systemctl status sshd
journalctl -u sshd -n 100&amp;lt;/pre&amp;gt; 
    &amp;lt;/div&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;If the above commands report that &amp;lt;code&amp;gt;sshd&amp;lt;/code&amp;gt; fails with memory allocation error, then&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
     &amp;lt;pre&amp;gt;sudo rm /etc/ssh/ssh_host*key*
sudo systemctl start sshd&amp;lt;/pre&amp;gt; 
    &amp;lt;/div&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;See also: &amp;lt;a href=&amp;quot;https://raspberrypi.stackexchange.com/questions/69289/raspberry-pi-3-on-arch-armv7-openssh-daemon-failed-on-memory-allocation&amp;quot;&amp;gt;memory leak of sshd&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;sect2&amp;quot;&amp;gt; 
   &amp;lt;h3 id=&amp;quot;install_and_configure_dropbear&amp;quot;&amp;gt;9.2. Install and configure dropbear&amp;lt;/h3&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;Install the dracut module &amp;lt;a href=&amp;quot;https://github.com/dracut-crypt-ssh/dracut-crypt-ssh&amp;quot;&amp;gt;crypt-ssh&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
     &amp;lt;pre&amp;gt;pacaur -S dracut-crypt-ssh-git&amp;lt;/pre&amp;gt; 
    &amp;lt;/div&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;From your Linux box, copy the public SSH key to the &amp;lt;code&amp;gt;appconf/dracut-crypt-ssh/authorized_keys&amp;lt;/code&amp;gt; file on the remote ODROID-C2 server&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
     &amp;lt;pre&amp;gt;cat ~/.ssh/*.pub | ssh alarm@10.0.0.100 &amp;#39;umask 077; mkdir -p appconf/dracut-crypt-ssh; touch appconf/dracut-crypt-ssh/authorized_keys; cat &amp;amp;gt;&amp;amp;gt;appconf/dracut-crypt-ssh/authorized_keys&amp;#39;&amp;lt;/pre&amp;gt; 
    &amp;lt;/div&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;Configure the &amp;lt;code&amp;gt;crypt-ssh&amp;lt;/code&amp;gt; module&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;listingblock&amp;quot;&amp;gt; 
    &amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;
     sudo nano /etc/dracut.conf.d/crypt-ssh.conf
    &amp;lt;/div&amp;gt; 
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
     &amp;lt;pre class=&amp;quot;prettyprint highlight&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-conf&amp;quot; data-lang=&amp;quot;conf&amp;quot;&amp;gt;dropbear_port=&amp;quot;22&amp;quot;
dropbear_acl=&amp;quot;/home/alarm/appconf/dracut-crypt-ssh/authorized_keys&amp;quot;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 
    &amp;lt;/div&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;Generate new initramfs using dracut (mind that the order of the modules is important)&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
     &amp;lt;pre&amp;gt;sudo dracut --force --hostonly -a &amp;quot;network crypt lvm crypt-ssh&amp;quot; /boot/initramfs-linux.img&amp;lt;/pre&amp;gt; 
    &amp;lt;/div&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;Enable network access during boot by adding &amp;lt;code&amp;gt;rd.neednet&amp;lt;/code&amp;gt; and &amp;lt;code&amp;gt;ip&amp;lt;/code&amp;gt; dracut options to &amp;lt;code&amp;gt;bootargs&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;listingblock&amp;quot;&amp;gt; 
    &amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;
     sudo nano /boot/boot.ini
    &amp;lt;/div&amp;gt; 
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
     &amp;lt;pre class=&amp;quot;prettyprint highlight&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-ini&amp;quot; data-lang=&amp;quot;ini&amp;quot;&amp;gt;setenv bootargs &amp;quot;rd.neednet=1 ip=10.0.0.100::10.0.0.1:255.255.255.0:archlinux-luks-host:eth0:off rd.luks.uuid=ae51db2d-0890-4b1b-abc5-8c10f01da353 root=/dev/mapper/vg-root rootwait &amp;amp;lt;leave the rest as is&amp;amp;gt;&amp;quot;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 
    &amp;lt;/div&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;If you prefer DHCP instead of static ip, simply replace with &amp;lt;code&amp;gt;ip=dhcp&amp;lt;/code&amp;gt;.&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;Refer to &amp;lt;a href=&amp;quot;https://www.kernel.org/pub/linux/utils/boot/dracut/dracut.html#_network&amp;quot;&amp;gt;network documentation of dracut&amp;lt;/a&amp;gt; and &amp;lt;a href=&amp;quot;https://fedoraproject.org/wiki/Dracut/Options&amp;quot;&amp;gt;dracut options&amp;lt;/a&amp;gt; for more options (&amp;lt;code&amp;gt;man dracut.cmdline&amp;lt;/code&amp;gt;).&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;Reboot so that dropbear starts, allowing for remote unlocking&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
     &amp;lt;pre&amp;gt;sudo reboot&amp;lt;/pre&amp;gt; 
    &amp;lt;/div&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;sect2&amp;quot;&amp;gt; 
   &amp;lt;h3 id=&amp;quot;unlocking_the_volume_interactively&amp;quot;&amp;gt;9.3. Unlocking the volume interactively&amp;lt;/h3&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;From your Linux box, connect to the remote dropbear ssh server running on the ODROID-C2&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
     &amp;lt;pre&amp;gt;ssh root@10.0.0.100&amp;lt;/pre&amp;gt; 
    &amp;lt;/div&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;Unlock the volume (asks you for the passphrase and sends it to console)&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
     &amp;lt;pre&amp;gt;console_auth
Passphrase:&amp;lt;/pre&amp;gt; 
    &amp;lt;/div&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;If unlocking the device succeeded, the initramfs will clean up itself and dropbear terminates itself and your connection.&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;ulist&amp;quot;&amp;gt; 
    &amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;
     Additional commands
    &amp;lt;/div&amp;gt; 
    &amp;lt;ul&amp;gt; 
     &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;&amp;lt;code&amp;gt;console_peek&amp;lt;/code&amp;gt; Prints whatâ€™s on the console&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
    &amp;lt;/ul&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;admonitionblock note&amp;quot;&amp;gt; 
    &amp;lt;table&amp;gt; 
     &amp;lt;tbody&amp;gt;
      &amp;lt;tr&amp;gt; 
       &amp;lt;td class=&amp;quot;icon&amp;quot;&amp;gt; 
        &amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;
         Note
        &amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt; 
       &amp;lt;td class=&amp;quot;content&amp;quot;&amp;gt; There is also the &amp;lt;a href=&amp;quot;https://github.com/dracut-crypt-ssh/dracut-crypt-ssh&amp;quot;&amp;gt;unlock command&amp;lt;/a&amp;gt; but we encountered &amp;lt;a href=&amp;quot;https://github.com/dracut-crypt-ssh/dracut-crypt-ssh/issues/4&amp;quot;&amp;gt;this issue&amp;lt;/a&amp;gt; when tested it at the time of this writing with all the latest updates installed. &amp;lt;/td&amp;gt; 
      &amp;lt;/tr&amp;gt; 
     &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;sect2&amp;quot;&amp;gt; 
   &amp;lt;h3 id=&amp;quot;unlocking_the_volume_using_console_auth_and_pexpect&amp;quot;&amp;gt;9.4. Unlocking the volume using console_auth and pexpect&amp;lt;/h3&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;Some use cases require to feed input automatically to the interactive command &amp;lt;code&amp;gt;console_auth&amp;lt;/code&amp;gt;. Since redirection will not work with &amp;lt;code&amp;gt;console_auth&amp;lt;/code&amp;gt; (for example, &amp;lt;code&amp;gt;printf &amp;#39;my-passphrase\n&amp;#39; | console_auth&amp;lt;/code&amp;gt;), weâ€™re going to use the &amp;lt;code&amp;gt;pexpect&amp;lt;/code&amp;gt; scripting language.&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;On your Linux box, install the pexpect package&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
     &amp;lt;pre&amp;gt;sudo pacman -S --needed python-pexpect&amp;lt;/pre&amp;gt; 
    &amp;lt;/div&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;Create the shell script&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;listingblock&amp;quot;&amp;gt; 
    &amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;
     nano auto-unlock.sh
    &amp;lt;/div&amp;gt; 
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
     &amp;lt;pre class=&amp;quot;prettyprint highlight&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;language-bash&amp;quot; data-lang=&amp;quot;bash&amp;quot;&amp;gt;#!/usr/bin/env bash

python -c &amp;quot;
import pexpect
child = pexpect.spawn(&amp;#39;ssh root@10.0.0.100 console_auth&amp;#39;)
child.expect (&amp;#39;Passphrase:&amp;#39;)
child.sendline (&amp;#39;$1&amp;#39;)
child.interact()&amp;quot;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt; 
    &amp;lt;/div&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
    &amp;lt;p&amp;gt;Unlock the volume using the &amp;lt;code&amp;gt;auto-unlock.sh&amp;lt;/code&amp;gt; script&amp;lt;/p&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;literalblock&amp;quot;&amp;gt; 
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
     &amp;lt;pre&amp;gt;auto-unlock.sh my-passphrase&amp;lt;/pre&amp;gt; 
    &amp;lt;/div&amp;gt; 
   &amp;lt;/div&amp;gt; 
   &amp;lt;div class=&amp;quot;admonitionblock caution&amp;quot;&amp;gt; 
    &amp;lt;table&amp;gt; 
     &amp;lt;tbody&amp;gt;
      &amp;lt;tr&amp;gt; 
       &amp;lt;td class=&amp;quot;icon&amp;quot;&amp;gt; 
        &amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;
         Caution
        &amp;lt;/div&amp;gt; &amp;lt;/td&amp;gt; 
       &amp;lt;td class=&amp;quot;content&amp;quot;&amp;gt; The script &amp;lt;code&amp;gt;auto-unlock.sh&amp;lt;/code&amp;gt; is simplistic and does not cover all the cases, such as the SSH host verification prompt. Therefore, unless youâ€™re planning to enhance the script to cover the additional cases, it is advised to follow the steps in &amp;lt;a href=&amp;quot;#unlocking_the_volume_interactively&amp;quot;&amp;gt;Unlocking the volume interactively&amp;lt;/a&amp;gt; at least once so to make sure that the &amp;lt;code&amp;gt;auto-unlock.sh&amp;lt;/code&amp;gt; script will only deal with the &amp;#39;Passphrase&amp;#39; prompt, because otherwise it will fail. &amp;lt;/td&amp;gt; 
      &amp;lt;/tr&amp;gt; 
     &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt; 
   &amp;lt;/div&amp;gt; 
  &amp;lt;/div&amp;gt; 
 &amp;lt;/div&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;sect1&amp;quot;&amp;gt; 
 &amp;lt;h2 id=&amp;quot;references&amp;quot;&amp;gt;10. References&amp;lt;/h2&amp;gt; 
 &amp;lt;div class=&amp;quot;sectionbody&amp;quot;&amp;gt; 
  &amp;lt;div class=&amp;quot;ulist&amp;quot;&amp;gt; 
   &amp;lt;ul&amp;gt; 
    &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://wiki.archlinux.org/index.php/Dm-crypt/Encrypting_an_entire_system&amp;quot;&amp;gt;ArchLinux dm-crypt/Encrypting an entire system&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
    &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://forum.odroid.com/viewtopic.php?t=20972&amp;quot;&amp;gt;How to install Debian with Full Disk Encryption on ODROID-C2&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
   &amp;lt;/ul&amp;gt; 
  &amp;lt;/div&amp;gt; 
 &amp;lt;/div&amp;gt; 
&amp;lt;/div&amp;gt;</description>	  
    </item><item>
      <title>OS image release for ODROID-C2</title>
      <link>http://yesday.github.io/blog/2017/os-image-release-for-odroid-c2.html</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0300</pubDate>
      <guid isPermaLink="false">blog/2017/os-image-release-for-odroid-c2.html</guid>
      <description>&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
 &amp;lt;p&amp;gt;An &amp;lt;a href=&amp;quot;../../os-image-for-odroid-c2-featuring-archlinux-luks-full-disk-encryption-and-remote-unlocking.html&amp;quot;&amp;gt;OS image for ODROID-C2&amp;lt;/a&amp;gt; has been released featuring ArchLinux, Full Disk Encryption (FDE), and remote unlocking. The related page has been added under the websiteâ€™s main menu &amp;lt;em&amp;gt;ODROID-C2 &amp;amp;gt; OS image&amp;lt;/em&amp;gt; to provide documentation and future updates.&amp;lt;/p&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
 &amp;lt;p&amp;gt;The root filesystem is encrypted with LUKS to provide additional protection against unauthorised access, particularly in the case when someone gains physical access to the device. The configuration is suitable for both headless and non headless setup, and supports remote unlocking (via SSH) of the encrypted root filesystem during the boot process.&amp;lt;/p&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
 &amp;lt;p&amp;gt;Read through the documentation for details on how to flash the OS image into a storage media along with other major information regarding the use of the image.&amp;lt;/p&amp;gt; 
&amp;lt;/div&amp;gt;</description>	  
    </item><item>
      <title>Why is the serial console better than HDMI for debugging</title>
      <link>http://yesday.github.io/blog/2017/why-is-the-serial-console-better-than-hdmi-for-debugging.html</link>
      <pubDate>Sat, 9 Sep 2017 00:00:00 +0300</pubDate>
      <guid isPermaLink="false">blog/2017/why-is-the-serial-console-better-than-hdmi-for-debugging.html</guid>
      <description>&amp;lt;div class=&amp;quot;openblock float-group&amp;quot;&amp;gt; 
 &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph left&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;
    USB-UART Module Kit
   &amp;lt;/div&amp;gt; 
   &amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;image&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://yesday.github.io/img/odroid-usb-uart-module-kit.jpg&amp;quot; alt=&amp;quot;odroid usb uart module kit&amp;quot; width=&amp;quot;190&amp;quot; height=&amp;quot;190&amp;quot; title=&amp;quot;USB-UART Module Kit&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph left&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;
    USB-UART connected to ODROID-C2
   &amp;lt;/div&amp;gt; 
   &amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;image&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://yesday.github.io/img/usb-uart-connected-to-odroid-c2.png&amp;quot; alt=&amp;quot;usb uart connected to odroid c2&amp;quot; width=&amp;quot;300&amp;quot; height=&amp;quot;200&amp;quot; title=&amp;quot;USB-UART connected to ODROID-C2&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
  &amp;lt;div class=&amp;quot;paragraph left&amp;quot;&amp;gt; 
   &amp;lt;div class=&amp;quot;title&amp;quot;&amp;gt;
    Serial console early boot messages
   &amp;lt;/div&amp;gt; 
   &amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;image&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;http://yesday.github.io/img/serial-console-early-boot-messages.png&amp;quot; alt=&amp;quot;serial console early boot messages&amp;quot; width=&amp;quot;340&amp;quot; height=&amp;quot;200&amp;quot; title=&amp;quot;Serial console early boot messages&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt; 
  &amp;lt;/div&amp;gt; 
 &amp;lt;/div&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
 &amp;lt;p&amp;gt;Sometimes we need to vew the early boot messages of the ODROID-C2. This is the case when we are dealing with a problem during boot, or creating a special purpose boot image, or when we add new external devices.&amp;lt;/p&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
 &amp;lt;p&amp;gt;In order to view the early boot messages we need to connect our ODROID-C2â€™s serial console port to a USB port of another Linux box, using a &amp;lt;a href=&amp;quot;http://www.hardkernel.com/main/products/prdt_info.php?g_code=G134111883934&amp;quot;&amp;gt;USB-UART Module Kit&amp;lt;/a&amp;gt; (see the pictures above). This allows us to have remote serial access to our ODROID-C2, in a similar manner as an SSH connection would.&amp;lt;/p&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
 &amp;lt;p&amp;gt;However, the serial console is better suited for such debugging scenarios than ether SSH or HDMI and keyboard combination would. That is because the serial console allows us to interact with the ODROID-C2 even when the SSH is not accessible and the HDMI monitor is blank. Such scenarios are:&amp;lt;/p&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;ulist&amp;quot;&amp;gt; 
 &amp;lt;ul&amp;gt; 
  &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;Diagnostic messages prior to the initialisation of the HDMI interface&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
  &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;Diagnostic messages in case of problematic (or disabled) initialisation of the HDMI interface (e.g. &amp;lt;code&amp;gt;setenv nographics &amp;quot;1&amp;quot;&amp;lt;/code&amp;gt; configuration inside &amp;lt;code&amp;gt;boot.ini&amp;lt;/code&amp;gt;)&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
  &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;Diagnostic messages prior to a failed boot&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
  &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;When we want to interrupt the automated boot process (hitting [Enter] twice during boot) to start an interactive u-boot shell. U-boot is a boot loader similar to lilo or grub, but is specifically designed for embedded devices like the ODROID-C2. Using the u-boot shell we can interactively test new boot configuration, load new kernel image, boot rootfs from a different partition, fix a failed boot process, and so on (essentially manually entering the boot commands found inside &amp;lt;code&amp;gt;boot.ini&amp;lt;/code&amp;gt;).&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
 &amp;lt;/ul&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
 &amp;lt;p&amp;gt;Follow these steps to connect to ODROID-C2â€™s serial console:&amp;lt;/p&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;ulist&amp;quot;&amp;gt; 
 &amp;lt;ul&amp;gt; 
  &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;Connect the USB-UART cable to the serial console port of the ODROID-C2 and the USB port of another Linux box&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
  &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;Power on the ODROID-C2 via the microUSB or the DC connector&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
  &amp;lt;li&amp;gt; &amp;lt;p&amp;gt;Connect to the ODROID-C2 from another Linux box by typing &amp;lt;code&amp;gt;sudo minicom -b 115200 -D /dev/ttyUSB0&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/li&amp;gt; 
 &amp;lt;/ul&amp;gt; 
&amp;lt;/div&amp;gt; 
&amp;lt;div class=&amp;quot;paragraph&amp;quot;&amp;gt; 
 &amp;lt;p&amp;gt;For more information refer to &amp;lt;a href=&amp;quot;https://github.com/umiddelb/armhf/wiki/Get-more-out-of-%22Das-U-Boot%22&amp;quot;&amp;gt;Get more out of &amp;quot;Das U Boot&amp;quot;&amp;lt;/a&amp;gt; and the section &amp;quot;USB / UART kit&amp;quot; from the &amp;lt;a href=&amp;quot;https://magazine.odroid.com/wp-content/uploads/odroid-c2-user-manual.pdf&amp;quot;&amp;gt;HARDKERNEL ODROID-C2 USER MANUAL&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt; 
&amp;lt;/div&amp;gt;</description>	  
    </item>

  </channel> 
</rss>
